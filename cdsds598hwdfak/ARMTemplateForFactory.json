{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "cdsds598hwdfak"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"GitHub_HW_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'GitHub_HW'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://cdsds598homeworkak.dfs.core.windows.net/"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://OPWAPIKEY.vault.azure.net/"
		},
		"GitHub_HW_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "adikoch17"
		},
		"OpenWeatherHist_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": " https://history.openweathermap.org/"
		},
		"OpenWeatherPoll_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://api.openweathermap.org/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Historical')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fetch_api",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://opwapikey.vault.azure.net/secrets/OWAPIKEY/cea7dedf48c04bb99455798ba5a72532?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net/"
							}
						}
					},
					{
						"name": "Until_weeks",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Fetch_api",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(int(variables('End_time')),int(pipeline().parameters.Curr_time))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append_timestamp",
									"type": "AppendVariable",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "weeks",
										"value": {
											"value": "@[variables('Start_time'),variables('End_time')]",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Increment_Start",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy data2",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Start_time",
										"value": {
											"value": "@string(add(int(variables('End_time')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Increment_End",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Increment_Start",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "End_time",
										"value": {
											"value": "@string(add(int(variables('Start_time')),int(pipeline().parameters.week_increment)))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.04:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "data/2.5/history/city?lat=42.36&lon=-71.05&type=hour&start=@{string(variables('Start_time'))}&end=@{string(variables('End_time'))}&appid=@{variables('API')}\n\n\n"
										},
										{
											"name": "Destination",
											"value": "cdsds598dlhwak/Bronze/Historical/"
										}
									],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Json3",
											"type": "DatasetReference",
											"parameters": {
												"API": {
													"value": "@activity('Fetch_api').output.value",
													"type": "Expression"
												},
												"Start": "@variables('Start_time')",
												"End": "@variables('End_time')"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Json4",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Start_time": {
						"type": "string",
						"defaultValue": "1698033600"
					},
					"Curr_time": {
						"type": "string",
						"defaultValue": "1727064000"
					},
					"week_increment": {
						"type": "string",
						"defaultValue": "604799"
					}
				},
				"variables": {
					"Start_time": {
						"type": "String",
						"defaultValue": "1698033600"
					},
					"End_time": {
						"type": "String",
						"defaultValue": "1698638400"
					},
					"API": {
						"type": "String",
						"defaultValue": "value"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json3')]",
				"[concat(variables('factoryId'), '/datasets/Json4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pollution')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fetch_api",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://opwapikey.vault.azure.net/secrets/OWAPIKEY/cea7dedf48c04bb99455798ba5a72532?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net/"
							}
						}
					},
					{
						"name": "Copy data1_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Fetch_api",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Json5",
								"type": "DatasetReference",
								"parameters": {
									"Start": {
										"value": "@variables('Start')",
										"type": "Expression"
									},
									"End": {
										"value": "@variables('Curr')",
										"type": "Expression"
									},
									"API": "@activity('Fetch_api').output.value"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json6",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Start": {
						"type": "String",
						"defaultValue": "1698033600"
					},
					"Curr": {
						"type": "String",
						"defaultValue": "1727064000"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json5')]",
				"[concat(variables('factoryId'), '/datasets/Json6')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OpenWeatherHist",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"API": {
						"type": "String",
						"defaultValue": "@activity('Fetch_api').output.value"
					},
					"Start": {
						"type": "String",
						"defaultValue": "@variables('Start_time')"
					},
					"End": {
						"type": "String",
						"defaultValue": "@variables('End_time')"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/history/city?lat=42.36&lon=-71.05&type=hour&start=@{string(dataset().Start)}&end=@{string(dataset().End)}&appid=@{dataset().API}\n\n\n",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OpenWeatherHist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Bronze/Historical",
						"fileSystem": "cdsds598dlhwak"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OpenWeatherPoll",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Start": {
						"type": "String",
						"defaultValue": "@variables('Start')"
					},
					"End": {
						"type": "String",
						"defaultValue": "@variables('Curr')"
					},
					"API": {
						"type": "String",
						"defaultValue": "@activity('Fetch_api').output.value"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/air_pollution/history?lat=42.36&lon=-71.05&type=hour&start=@{string(dataset().Start)}&end=@{string(dataset().End)}&appid=@{dataset().API}\n\n\n\n",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OpenWeatherPoll')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Bronze/Pollution",
						"fileSystem": "cdsds598dlhwak"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json7')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Bronze/Historical/data/2.5/history",
						"fileSystem": "cdsds598dlhwak"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						},
						"cod": {
							"type": "string"
						},
						"city_id": {
							"type": "integer"
						},
						"calctime": {
							"type": "number"
						},
						"cnt": {
							"type": "integer"
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"dt": {
										"type": "integer"
									},
									"main": {
										"type": "object",
										"properties": {
											"temp": {
												"type": "number"
											},
											"feels_like": {
												"type": "number"
											},
											"pressure": {
												"type": "integer"
											},
											"humidity": {
												"type": "integer"
											},
											"temp_min": {
												"type": "number"
											},
											"temp_max": {
												"type": "number"
											}
										}
									},
									"wind": {
										"type": "object",
										"properties": {
											"speed": {
												"type": "number"
											},
											"deg": {
												"type": "integer"
											}
										}
									},
									"clouds": {
										"type": "object",
										"properties": {
											"all": {
												"type": "integer"
											}
										}
									},
									"weather": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"main": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"icon": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GitHub_HW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('GitHub_HW_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('GitHub_HW_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQDk5MUMxQkMyLTE1OEItNEIzRC05NjRELTIzRTMyMUE1NTA2RV9iNjUwOGE2MS1lZjkwLTQxZTMtYTdmZC03YTYzMTQzZTQ2MDciDQp9"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpenWeatherHist')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Open Weather Historical API",
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('OpenWeatherHist_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"APIKey": {
							"type": "AzureKeyVaultSecret",
							"store": {
								"referenceName": "AzureKeyVault1",
								"type": "LinkedServiceReference"
							},
							"secretName": "OWAPIKEY"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpenWeatherPoll')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Open Weather Pollution API",
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('OpenWeatherPoll_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"APIKey": {
							"type": "AzureKeyVaultSecret",
							"store": {
								"referenceName": "AzureKeyVault1",
								"type": "LinkedServiceReference"
							},
							"secretName": "OWAPIKEY"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json7",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          message as string,",
						"          cod as string,",
						"          city_id as integer,",
						"          calctime as double,",
						"          cnt as integer,",
						"          list as (dt as integer, main as (temp as double, feels_like as double, pressure as integer, humidity as integer, temp_min as double, temp_max as double), wind as (speed as double, deg as integer), clouds as (all as integer), weather as (id as integer, main as string, description as string, icon as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> source1",
						"source1 foldDown(unroll(),",
						"     mapColumn(",
						"          message,",
						"          cod,",
						"          city_id,",
						"          cnt,",
						"          calctime,",
						"          timestamp = list.dt,",
						"          temp = list.main.temp,",
						"          feels_like = list.main.feels_like,",
						"          pressure = list.main.pressure,",
						"          humidity = list.main.humidity,",
						"          temp_min = list.main.temp_min,",
						"          temp_max = list.main.temp_max,",
						"          wind_speed = list.wind.speed,",
						"          wind_deg = list.wind.deg,",
						"          cloud_coverage = list.clouds.all,",
						"          weather_description = list.weather.description,",
						"          weather_id = list.weather.id,",
						"          weather_main = list.weather.main,",
						"          weather_icon = list.weather.icon",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(corrected_timestamp = iif(length(toString(timestamp)) > 10, toInteger(null()), toInteger(timestamp)),",
						"          location = 'Boston') ~> derivedColumn1",
						"derivedColumn1 filter(!isNull(temp) && !isNull(humidity) && !isNull(corrected_timestamp)) ~> filter1",
						"filter1 derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, '_', toString(corrected_timestamp)),",
						"          temp_c = round(temp - 273.15, 2),",
						"          temp_f = round((temp - 273.15) * 9/5 + 32, 2),",
						"          temp_min_c = round(temp_min - 273.15, 2),",
						"          temp_max_c = round(temp_max - 273.15, 2),",
						"          temp_min_f = round((temp_min - 273.15) * 9/5 + 32, 2),",
						"          temp_max_f = round((temp_max - 273.15) * 9/5 + 32, 2),",
						"          lat = 42.3601,",
						"          lon = -71.0589,",
						"          weather_id_value = toInteger(weather_id),",
						"          weather_description_value = split(weather_description, ': ')[1],",
						"          weather_main_value = split(weather_main, ': ')[1],",
						"          weather_icon_value = split(weather_icon, ': ')[1]) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          temp_k = temp,",
						"          feels_like_k = feels_like,",
						"          pressure,",
						"          humidity,",
						"          temp_min_k = temp_min,",
						"          temp_max_k = temp_max,",
						"          wind_speed,",
						"          wind_deg,",
						"          cloud_coverage,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          id,",
						"          temp_c,",
						"          temp_f,",
						"          temp_min_c,",
						"          temp_max_c,",
						"          temp_min_f,",
						"          temp_max_f,",
						"          lat,",
						"          lon,",
						"          weather_id_value,",
						"          weather_description_value,",
						"          weather_main_value,",
						"          weather_icon_value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json7')]",
				"[concat(variables('factoryId'), '/datasets/Parquet1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Silver/Historical_Weather",
						"fileSystem": "cdsds598dlhwak"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Preprocess_bronze_weather')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.3:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		}
	]
}