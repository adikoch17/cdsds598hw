{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "cdsds598hwdfak"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"GitHub_HW_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'GitHub_HW'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://cdsds598homeworkak.dfs.core.windows.net/"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://OPWAPIKEY.vault.azure.net/"
		},
		"GitHub_HW_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "adikoch17"
		},
		"OpenWeatherHist_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": " https://history.openweathermap.org/"
		},
		"OpenWeatherPoll_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://api.openweathermap.org/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Historical')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fetch_api",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://opwapikey.vault.azure.net/secrets/OWAPIKEY/cea7dedf48c04bb99455798ba5a72532?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net/"
							}
						}
					},
					{
						"name": "Hourly",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('weeks')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "APIKEY",
											"value": "@activity('Fetch_api').output.value"
										}
									],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Json1",
											"type": "DatasetReference",
											"parameters": {
												"APIKEY_PARAM": {
													"value": "@variables('API')",
													"type": "Expression"
												},
												"Start": "@item()[0]"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Json2",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "SetAPI",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Fetch_api",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "API",
							"value": {
								"value": "@activity('Fetch_api').output",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Until_weeks",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "SetAPI",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(pipeline().parameters.Curr_time,int(variables('End_time')))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append_timestamp",
									"type": "AppendVariable",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "weeks",
										"value": {
											"value": "@[variables('Start_time'),variables('End_time')]",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Increment_Start",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy data2",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Start_time",
										"value": {
											"value": "@string(add(int(variables('End_time')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Increment_End",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Increment_Start",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "End_time",
										"value": {
											"value": "@int(add(int(variables('Start_time')),pipeline().parameters.week_increment))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "data/2.5/history/city?lat=42.36&lon=-71.05&type=hour&start=@{string(variables('Start_time'))}&end=@{string(variables('End_time'))}&appid=@{variables('API')}\n\n\n"
										},
										{
											"name": "Destination",
											"value": "cdsds598dlhwak/Bronze/Historical/"
										}
									],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Json3",
											"type": "DatasetReference",
											"parameters": {
												"API": {
													"value": "@variables('API')",
													"type": "Expression"
												},
												"Start": "@variables('Start_time')",
												"End": "@variables('End_time')"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Json4",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Start_time": {
						"type": "int",
						"defaultValue": 1698033600
					},
					"Curr_time": {
						"type": "int",
						"defaultValue": 1727064000
					},
					"week_increment": {
						"type": "int",
						"defaultValue": 604800
					}
				},
				"variables": {
					"Start_time": {
						"type": "Integer",
						"defaultValue": 1698033600
					},
					"End_time": {
						"type": "Integer",
						"defaultValue": 1698638400
					},
					"API": {
						"type": "String",
						"defaultValue": "value"
					},
					"weeks": {
						"type": "Array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/Json2')]",
				"[concat(variables('factoryId'), '/datasets/Json3')]",
				"[concat(variables('factoryId'), '/datasets/Json4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OpenWeatherHist",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"APIKEY_PARAM": {
						"type": "String",
						"defaultValue": "@variables('API')"
					},
					"Start": {
						"type": "String",
						"defaultValue": "@item()[0]"
					},
					"End": {
						"type": "String",
						"defaultValue": "@string(item()[1])"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/history/city?lat=41.85&type=hour&start=@{dataset().Start}&end=@{dataset().End}&lon=-87.65&appid=@{dataset().APIKEY_PARAM}",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OpenWeatherHist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Bronze/Historical",
						"fileSystem": "cdsds598dlhwak"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OpenWeatherHist",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"API": {
						"type": "String",
						"defaultValue": "@variables('APIKEY')"
					},
					"Start": {
						"type": "String",
						"defaultValue": "@variables('Start_time')"
					},
					"End": {
						"type": "String",
						"defaultValue": "@variables('End_time')"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/history/city?lat=42.36&lon=-71.05&type=hour&start=@{string(dataset().Start)}&end=@{string(dataset().End)}&appid=@{dataset().API}\n\n\n",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OpenWeatherHist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Bronze/Historical",
						"fileSystem": "cdsds598dlhwak"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GitHub_HW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('GitHub_HW_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('GitHub_HW_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQDk5MUMxQkMyLTE1OEItNEIzRC05NjRELTIzRTMyMUE1NTA2RV9iNjUwOGE2MS1lZjkwLTQxZTMtYTdmZC03YTYzMTQzZTQ2MDciDQp9"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpenWeatherHist')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Open Weather Historical API",
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('OpenWeatherHist_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"APIKey": {
							"type": "AzureKeyVaultSecret",
							"store": {
								"referenceName": "AzureKeyVault1",
								"type": "LinkedServiceReference"
							},
							"secretName": "OWAPIKEY"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpenWeatherPoll')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Open Weather Pollution API",
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('OpenWeatherPoll_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"APIKey": {
							"type": "AzureKeyVaultSecret",
							"store": {
								"referenceName": "AzureKeyVault1",
								"type": "LinkedServiceReference"
							},
							"secretName": "OWAPIKEY"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		}
	]
}